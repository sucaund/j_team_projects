<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oracle.hellong.MemberMapper">
	<!-- mybatis에서 사용(configuration.xml도 마찬가지) -->
	<select id="jmMemberTotal" resultType="int"> <!-- 이 타입은 DaoImpl에서 이걸 꺼내 쓰는 타입 -->
		SELECT Count(*) FROM member
	</select>
	
	<select id="jmMemberTotalReal" resultType="int"> <!-- 이 타입은 DaoImpl에서 이걸 꺼내 쓰는 타입 -->
		SELECT Count(*) FROM member where m_isDeleted=0
	</select>

	<select id="getAllMember" resultType="Member">
		SELECT *
		FROM MEMBER WHERE M_ISDELETED = 0
	</select>

	<!-- jmMemberDaoImpl -> jmDetailMember에서 사용 -->			<!-- 이 타입은 configuration에서 alias로 정해준것 -->
	<select id="jmMemberListAll" parameterType="Member"
		resultType="Member">
		<![CDATA[
		SELECT
		*
		FROM
		(
		SELECT rownum rn , a.*
		FROM
		(select * from member order by m_id) a
		)			
		WHERE rn >= #{start} 
		and rn<=#{end} 
		]]> 	<!-- # 여기 안에 있는게 파라미터 타입 -->
	</select>
	
	<!-- jmMemberDaoImpl -> jmDetailMember에서 사용 -->			<!-- 이 타입은 configuration에서 alias로 정해준것 -->
	<select id="jmMemberListAllReal" parameterType="Member"
		resultType="Member">
		<![CDATA[
		SELECT
		*
		FROM
		(
		SELECT rownum rn , a.*
		FROM
		(select * from member where m_isdeleted=0 order by m_id) a
		)			
		WHERE rn >= #{start} 
		and rn<=#{end} 
		]]> 	<!-- # 여기 안에 있는게 파라미터 타입 -->
	</select>
	
	

	<!-- jmMemberDaoImpl -> jmDetailMember에서 사용 -->
	<select id="jmMemberSelectOne" parameterType="int"
		resultType="Member">
		SELECT * FROM member WHERE m_number = #{m_number}
	</select>
	

	<update id="jmMemberUpdate" parameterType="Member">
		UPDATE member SET
		<if test="#{m_name}!=null"> m_name=#{m_name},  </if>
		<if test="#{m_age}!=null"> m_age=#{m_age},  </if>
		<if test="#{m_phone}!=null"> m_phone=#{m_phone},  </if>
		<if test="#{m_email}!=null"> m_email=#{m_email},  </if>
		<if test="#{m_address}!=null"> m_address=#{m_address},  </if>
		m_update= sysdate
		WHERE
		m_number=#{m_number}
		and m_isdeleted=0
	</update>


	<insert id="jmInsertMember" parameterType="Member">
		<selectKey keyProperty="m_number" resultType="int"
			order="BEFORE">
			SELECT m_number_seq.NEXTVAL FROM DUAL
		</selectKey>

		insert into member (m_number, m_id, m_pw, m_name, m_age,
		m_gender, m_phone, m_email, m_address, m_regdate )
		values ( #{m_number},
		#{m_id}, #{m_pw}, #{m_name}, #{m_age},
		#{m_gender}, #{m_phone},
		#{m_email}, #{m_address}, sysdate)
	</insert>
	
		<!-- jmMemberDaoImpl -> jmGetMemberFromId에서 사용 -->
	<select id="jmGetMemberFromId" parameterType="String"
		resultType="Member">
		SELECT * FROM member WHERE m_id = #{m_id}
	</select>
	
	<select id="jmGetIdFromMail" parameterType="String"
		resultType="String">
		SELECT m_id FROM member WHERE m_email = #{mail} and m_isdeleted=0
	</select>
	
	<select id="jmGetM_numberFromIdAndEmail" parameterType="Member"
		resultType="int">
		SELECT m_number FROM member WHERE m_id= #{m_id} and m_email = #{m_email} and m_isdeleted=0
	</select>
	
	
	<update id="jmDeleteMemberFake" parameterType="int">
		UPDATE member SET
		m_isdeleted=1
		WHERE m_number=#{m_number}
	</update>
	
	 <select id="jmCheckId" parameterType = "String" resultType = "int">
 	 	SELECT COUNT(*) FROM MEMBER WHERE m_id = #{m_id} and m_isdeleted=0
 	 </select>
 	 
 	 <!-- 로그인 체크 위해 비밀번호 꺼내오기 -->
 	 <select id="jmLogin" parameterType="String" resultType="String">
		select m_pw
		  from member
		 where m_id=#{m_id} and m_isdeleted=0
	</select>
	
	<!-- 비밀번호 중복 체크 위해, 입력자의 m_number와 일치하는 (암호화된) 비밀번호를 꺼내옴 -->
	<select id="jmGetMemberPwFromNumber" parameterType="int" resultType="String">
		select m_pw
		  from member
		 where m_number=#{m_number} and m_isdeleted=0
	</select>
	
	<update id="jmResetPw" parameterType="Member">
		UPDATE member 
		set m_pw=#{m_pw}
		WHERE m_number=#{m_number}
	</update>
	
	

	<select id="getMember" resultType="Member" parameterType="int">
		SELECT*
		FROM MEMBER WHERE M_NUMBER = #{id}
	</select>

	<update id="updateMember">
    UPDATE MEMBER
    SET COMMON_MCD = #{admin}
    WHERE M_NUMBER = #{m_number}
	</update>
	
	<update id="deleteMember" parameterType="int">
    UPDATE MEMBER
    SET M_ISDELETED = 1
    WHERE M_NUMBER =#{m_number}
	</update>

	<select id="hsTotalMemberCnt" resultType="int">
		SELECT count(*) FROM member
	</select>
	
	<select id="hsListMember" parameterType="Member" resultType="Member">
	<![CDATA[
		SELECT * 
		FROM
			(SELECT rownum rn, a.*
			 FROM
			 	(SELECT *
			 	 FROM member
			 	 ORDER BY m_number) a
			)
	]]>
	</select>
	
	<select id="hsBoardMemberName" parameterType="Board" resultType="String">
		SELECT m_name 
		FROM member WHERE m_number=#{m_number}
	</select>
	
	<select id="hsGetMemberData" parameterType="int" resultType="Member">
		SELECT *
		FROM member
		WHERE m_number=#{m_number}
	</select>
	
<!-- 	<select id="hsCondTotalListPointCount" resultType="int">
		SELECT count(*) 
		<choose>
			<when test="select == 'point_charge'">
				FROM member m, point_charge p 
				WHERE m.m_number = p.m_number
				AND m.m_number = 40
			</when>
			<when test="select == 'gym_order_deal'">
				FROM member m, gym_order g
				WHERE m.m_number = g.m_number
				AND m.m_number = 40
				AND g.refund_date IS NULL
			</when>
			<when test="select == 'gym_order_refund'">
				FROM member m, gym_order g
				WHERE m.m_number = g.m_number
				AND m.m_number = 40
				AND g.refund_date IS NOT NULL
			</when>
		</choose>
	</select> -->

<!-- 	<select id="hsListPointCharge" parameterType="Member" resultType="PointCharge">
		<choose>
			<when test="select == 'point_charge'">
				SELECT *
				FROM 
					(SELECT rownum rn, a.*
					 FROM
						(SELECT *
						 FROM member m, point_charge p
						 WHERE m.m_number = p.m_number
						 AND m.m_number = 40
						 ORDER BY p.charge_date DESC
						) a
					)
				WHERE rn BETWEEN #{start} and #{end} 
			</when>
		</choose>
	</select>
	
	<select id="hsListGymOrder" parameterType="Member" resultType="GymOrder">
		SELECT *
		FROM
			(SELECT rownum rn, a.*
			 FROM
			 	(SELECT *
			 	 FROM member m, gym_order g 
			 	 WHERE m.m_number = g.m_number
			 	 AND m.m_number = 40
			 	 	<choose>
			 	 		<when test="select == 'gym_order_deal'">
			 	 			AND g.refund_date IS NULL
			 	 	    	ORDER BY g.deal_date DESC
			 	 		</when>
			 	 		<when test="select == 'gym_order_refund'">
			 	 			AND g.refund_date IS NOT NULL
			 	 			ORDER BY g.refund_date DESC
			 	 		</when>
			 	 	</choose>
			 	) a
			)
		WHERE rn BETWEEN #{start} and #{end}
	</select> -->

</mapper>