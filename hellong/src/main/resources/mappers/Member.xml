<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oracle.hellong.MemberMapper">
	<!-- mybatis에서 사용(configuration.xml도 마찬가지) -->
	<select id="jmMemberTotal" resultType="int"> <!-- 이 타입은 DaoImpl에서 이걸 꺼내 쓰는 타입 -->
		SELECT Count(*) FROM member
	</select>
	
	<select id="jmMemberTotalReal" resultType="int"> <!-- 이 타입은 DaoImpl에서 이걸 꺼내 쓰는 타입 -->
		SELECT Count(*) FROM member where m_isDeleted=0
	</select>

	<select id="getAllMember" resultType="Member">
		SELECT*
		FROM MEMBER WHERE M_ISDELETED = 0
	</select>

	<!-- jmMemberDaoImpl -> jmDetailMember에서 사용 -->			<!-- 이 타입은 configuration에서 alias로 정해준것 -->
	<select id="jmMemberListAll" parameterType="Member"
		resultType="Member">
		<![CDATA[
		SELECT
		*
		FROM
		(
		SELECT rownum rn , a.*
		FROM
		(select * from member order by m_id) a
		)			
		WHERE rn >= #{start} 
		and rn<=#{end} 
		]]> 	<!-- # 여기 안에 있는게 파라미터 타입 -->
	</select>
	
	<!-- jmMemberDaoImpl -> jmDetailMember에서 사용 -->			<!-- 이 타입은 configuration에서 alias로 정해준것 -->
	<select id="jmMemberListAllReal" parameterType="Member"
		resultType="Member">
		<![CDATA[
		SELECT
		*
		FROM
		(
		SELECT rownum rn , a.*
		FROM
		(select * from member where m_isdeleted=0 order by m_id) a
		)			
		WHERE rn >= #{start} 
		and rn<=#{end} 
		]]> 	<!-- # 여기 안에 있는게 파라미터 타입 -->
	</select>
	
	

	<!-- jmMemberDaoImpl -> jmDetailMember에서 사용 -->
	<select id="jmMemberSelectOne" parameterType="int"
		resultType="Member">
		SELECT * FROM member WHERE m_number = #{m_number}
	</select>
	

	<update id="jmMemberUpdate" parameterType="Member">
		UPDATE member SET
		<if test="#{m_id}!=null"> m_id=#{m_id},  </if>
		m_pw=#{m_pw}, m_name=#{m_name},
		m_age=#{m_age}, m_gender=#{m_gender},
		m_phone=#{m_phone},
		m_email=#{m_email}, m_address=#{m_address},
		m_update= sysdate
		WHERE
		m_id=#{m_id}
	</update>


	<insert id="jmInsertMember" parameterType="Member">
		<selectKey keyProperty="m_number" resultType="int"
			order="BEFORE">
			SELECT m_number_seq.NEXTVAL FROM DUAL
		</selectKey>

		insert into member (m_number, m_id, m_pw, m_name, m_age,
		m_gender, m_phone, m_email, m_address, m_regdate )
		values ( #{m_number},
		#{m_id}, #{m_pw}, #{m_name}, #{m_age},
		#{m_gender}, #{m_phone},
		#{m_email}, #{m_address}, sysdate)
	</insert>
	
		<!-- jmMemberDaoImpl -> jmGetMemberFromId에서 사용 -->
	<select id="jmGetMemberFromId" parameterType="String"
		resultType="Member">
		SELECT * FROM member WHERE m_id = #{m_id}
	</select>
	
	<delete id="jmDeleteMemberReal" parameterType="int">
		delete from member where m_number=#{m_number}
	</delete>
	
	<update id="jmDeleteMemberFake" parameterType="int">
		UPDATE member SET
		m_isdeleted=1
		WHERE m_number=#{m_number}
	</update>
	
	 <select id="jmCheckId" parameterType = "String" resultType = "int">
 	 	SELECT COUNT(*) FROM MEMBER WHERE m_id = #{m_id} and m_isdeleted=0
 	 </select>
 	 
 	 <!-- 로그인 체크 위해 비밀번호 꺼내오기 -->
 	 <select id="jmLogin" parameterType="String" resultType="String">
		select m_pw
		  from member
		 where m_id=#{m_id} and m_isdeleted=0
	</select>
	


	<select id="getMember" resultType="Member" parameterType="int">
		SELECT*
		FROM MEMBER WHERE M_NUMBER = #{id}
	</select>

	<update id="updateMember">
    UPDATE MEMBER
    SET COMMON_MCD = #{admin}
    WHERE M_NUMBER = #{m_number}
	</update>
	
	<update id="deleteMember" parameterType="int">
    UPDATE MEMBER
    SET M_ISDELETED = 1
    WHERE M_NUMBER =#{m_number}
	</update>

</mapper>