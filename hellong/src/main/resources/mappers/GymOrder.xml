<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oracle.hellong.GymOrderMapper">

			<!-- 현승 xml -->
	
		<!-- 포인트 내역 조회 -->

	<!-- 포인트사용 내역 -->
	<select id="hsTotalListGymOrderDealCnt" parameterType="int" resultType="int">
		SELECT count(*)
		FROM gym_order 
		WHERE m_number = #{m_number}
	</select>
	
	<select id="hsListGymOrderDeal" parameterType="Member" resultType="GymOrder">
		SELECT *
		FROM
			(SELECT rownum rn, (a.g_name || ' ' || a.s_name || ' 구매') "pl_content",
					a.deal_date "pl_date", ('-' || a.use_point) "pl_point"
			 FROM
			     (SELECT g.g_name, gs.s_name, go.*
			      FROM gym g, g_s gs, g_s_detail gsd, gym_order go
			      WHERE g.g_id = gs.g_id
				   	  AND g.g_id = gsd.g_id
                      AND g.g_id = go.g_id
				   	  AND gs.s_number = gsd.s_number
                      AND gs.s_number = go.s_number
                      AND gsd.sd_number = go.sd_number
				   	  AND go.m_number = #{m_number}
			      ORDER BY go.deal_date DESC
			    ) a
			)
	WHERE  rn BETWEEN #{start} and #{end} 
	
	</select>
	
	<!-- 포인트환불 내역 -->
	<select id="hsTotalListGymOrderRefundCnt" parameterType="int" resultType="int">
		SELECT count(*)
		FROM gym_order
		WHERE m_number = #{m_number}
			AND refund_date IS NOT NULL
	</select>
	
	<select id="hsListGymOrderRefund" parameterType="Member" resultType="GymOrder">
		SELECT *
		FROM
			(SELECT rownum rn, (a.g_name || ' ' || a.s_name || ' 환불') "pl_content",
					a.refund_date "pl_date", ('+' || a.refund_point) "pl_point"
			 FROM
			     (SELECT g.g_name, gs.s_name, go.*
			      FROM gym g, g_s gs, gym_order go
			      WHERE g.g_id = gs.g_id
				   	  AND gs.g_id = go.g_id
				   	  AND gs.s_number = go.s_number
				   	  AND go.m_number = #{m_number}
				   	  AND go.refund_date IS NOT NULL
			      ORDER BY go.refund_date DESC
			    ) a
			)
		WHERE  rn BETWEEN #{start} and #{end}
	</select>
	
	
	
		<!-- 헬스장 이용내역 조회 -->
	
	<select id="hsTotalUsingGym" parameterType="int" resultType="int">
		SELECT count(*)
		FROM 
			(SELECT DISTINCT g_id
			 FROM gym_order
			 WHERE m_number = #{m_number})
	</select>
	
	<select id="hsListDetailUsingGym" parameterType="Member" resultType="GymOrder">
	
	
 <!-- 		SELECT DISTINCT g.g_id g_id, g.g_name g_name, g.g_address g_address, go.m_number m_number,
						get_period_of_use(go.g_id, go.m_number) period_of_use,
		          		get_first_regist_date(go.g_id, go.m_number) first_regist_date
		FROM gym g, gym_order go
		WHERE g.g_id = go.g_id
		     AND go.m_number = #{m_number}  -->
		     
	<!-- 일시적 오류시 이걸로 해결 -->	     
<!-- 	     SELECT DISTINCT g.g_id g_id, g.g_name g_name, go.m_number m_number,
	             (get_years(go.g_id, go.m_number) || '년 ' || get_months(go.g_id, go.m_number) || '개월') period_of_use,
	              get_first_regist_date(go.g_id, go.m_number) first_regist_date
		 FROM gym g, gym_order go
		 WHERE g.g_id = go.g_id
		      AND go.m_number = 1
				      -->
    	SELECT DISTINCT g.g_id g_id, g.g_name g_name, g.g_address g_address, 
							go.m_number m_number, a.gbf_storedfilename gbf_storedfilename,
		                get_period_of_use(go.g_id, go.m_number) period_of_use,
		                get_first_regist_date(go.g_id, go.m_number) first_regist_date
	    FROM gym g, gym_order go, 
			    (SELECT g_id, gbf_storedfilename
			    FROM 
			        (SELECT g_id, gbf_storedfilename, 
			                ROW_NUMBER() OVER (PARTITION BY g_id ORDER BY gbf_storedfilename DESC) AS rn
			        FROM gym_board_file) 
			   		 WHERE rn = 1) a
		WHERE g.g_id = a.g_id
			AND g.g_id = go.g_id
	    	AND go.m_number =  #{m_number}
		     
<!-- SELECT DISTINCT g.g_id g_id, g.g_name g_name, g.g_address g_address, 
					go.m_number m_number, a.gbf_storedfilename gbf_storedfilename,
                get_period_of_use(go.g_id, go.m_number) period_of_use,
                get_first_regist_date(go.g_id, go.m_number) first_regist_date
FROM gym g, gym_order go, 
    (SELECT g_id, gbf_storedfilename
    FROM 
        (SELECT g_id, gbf_storedfilename, 
                ROW_NUMBER() OVER (PARTITION BY g_id ORDER BY gbf_storedfilename DESC) AS rn
        FROM gym_board_file) 
    WHERE rn = 1) a
WHERE g.g_id = a.g_id
    AND g.g_id = go.g_id
    AND go.m_number = 1 -->
	</select>
	
		<!-- 헬스장 회원권 구매 -->
		
	<!-- 지훈님 form에서 받는 데이터로 GSDetail 정보 조회 + s_period, sd_price 가져오기 -->
	<select id="hsGetGSDetailData" parameterType="GSGSDetailJoin" resultType="GSDetail">
		SELECT g.g_name g_name, gs.s_name s_name, gs.s_period s_period, gsd.*
		FROM gym g, g_s gs, g_s_detail gsd
		WHERE g.g_id = gs.g_id
			AND g.g_id = gsd.g_id		
			AND gs.s_number = gsd.s_number
			AND gsd.g_id = #{g_id}
			AND gsd.s_number = #{s_number}
			AND gsd.sd_number = #{sd_number}
			AND gsd.sd_isend = 0
	</select>
	
	<select id="hsGetGSDetailDataBuy" parameterType="map" resultType="GSDetail">
		SELECT *
		FROM g_s_detail
		WHERE g_id = #{g_id}
            AND s_number = #{s_number}
            AND sd_number = #{sd_number}
            AND sd_isend = 0
	</select>

	<insert id="hsInsertAndGetGymOrder" parameterType="GSDetail" useGeneratedKeys="true" keyColumn="go_number" keyProperty="go_number">
		INSERT INTO gym_order VALUES (#{g_id}, #{s_number}, #{sd_number}, #{m_number}, go_number_seq.nextval, #{sd_price}, sysdate, null, 0, null, sysdate, null, 0)
	</insert>
	
	<update id="hsUpdateGymOrderBuy" parameterType="GSDetail">
		UPDATE gym_order SET go_enddate = (SELECT 
                                            (go.deal_date + gs.s_period) go_enddate               
                                            FROM g_s gs, g_s_detail gsd, gym_order go
                                            WHERE gs.g_id = gsd.g_id
                                            AND gs.g_id = go.g_id
                                            AND gs.s_number = gsd.s_number
                                            AND gs.s_number = go.s_number
                                            AND gsd.sd_number = go.sd_number
                                            AND go.g_id = #{g_id}
                                            AND go.s_number = #{s_number}
                                            AND go.sd_number = #{sd_number}
                                            AND go.m_number = #{m_number}
                                            AND go.go_number = #{go_number} )
        WHERE g_id = #{g_id}
           AND s_number = #{s_number}
           AND sd_number = #{sd_number}
           AND m_number = #{m_number}
      	   AND go_number = #{go_number} 
	</update>
	
	<!-- Member 구매포인트 업데이트 -->
	<update id="hsUpdatePointBuy" parameterType="GSDetail">
		UPDATE member SET m_currpoint = m_currpoint - (SELECT use_point
					                                   FROM gym_order
					                                   WHERE g_id = #{g_id}
					                                       AND s_number = #{s_number}
					                                       AND sd_number = #{sd_number}
					                                       AND m_number = #{m_number}
					                                  	   AND go_number = #{go_number}
					                                       AND go_isend = 0)
		WHERE m_number = #{m_number}
			AND m_currpoint >= (SELECT use_point
	                             FROM gym_order
	                             WHERE g_id = #{g_id}
	                                 AND s_number = #{s_number}
	                                 AND sd_number = #{sd_number}
	                                 AND m_number = #{m_number}
	                           	     AND go_number = #{go_number}
	                                 AND go_isend = 0)
	</update>
	
	
		<!-- 헬스장 회원권 환불 -->
	
	<!-- 이용중인 헬스장 이름 조회 -->
	<select id="hsListGymName" parameterType="int" resultType="GymOrder">
		SELECT DISTINCT g.g_name, g.g_id
		FROM member m, gym g, gym_order go
		WHERE m.m_number = go.m_number
            AND g.g_id = go.g_id
			AND go.m_number = #{m_number}
            AND go.go_isend = 0
	</select>
	
	<!-- 이용중인 헬스장 서비스 조회 -->
	<select id="hsListGymSerivce" parameterType="map" resultType="GymOrder">
		SELECT go.*, 
			(gs.s_name || ' (이용시작일: ' || go.go_startdate || ' 이용종료일: ' || go.go_enddate || ')') "rl_s_name"
		FROM g_s gs, g_s_detail gsd, gym_order go
		WHERE gs.g_id = gsd.g_id
			AND gs.g_id = go.g_id
			AND gs.s_number = gsd.s_number
			AND gsd.s_number = go.s_number
			AND gsd.sd_number = go.sd_number
            AND go.g_id = #{g_id}
			AND go.m_number = #{m_number}
			AND go.go_isend = 0
		ORDER BY go.go_startdate ASC
	</select>
	
	<!-- 이용중인 헬스장 예상 환불금액 조회  -->
	<!-- case when 문법이 mybatis에서는 적용이안되서 function으로 값을 받아 수행
		case when이 되는 경우도 있는데 이 경우에는 작동이 되지 않았음 -->
   <select id="hsRefundData" parameterType="map" resultType="GymOrder">
      SELECT ROUND(a.use_point*(a.refund_criteria/100), -1) "refund_point", 
      		(a.refund_criteria || '% 환불') "refund_criteria"
      FROM	
         ( SELECT go.*,
         		  get_refund_criteria(#{g_id}, #{s_number}, #{sd_number}, #{m_number}, #{go_number}) refund_criteria
           FROM gym_order go
           WHERE go.g_id = #{g_id}
           	AND go.s_number = #{s_number}
           	AND go.sd_number = #{sd_number}
	     	AND go.m_number = #{m_number}
	     	AND go.go_number = #{go_number}
         )  a
    </select>
    
    <!-- GymOrder에 환불정보 업데이트 -->
    <update id="hsUpdateGymOrderRefund" parameterType="map">
    	UPDATE gym_order SET refund_point = #{refund_point},
                    		 refund_date = sysdate,
                    		 go_enddate = sysdate,
                    		 go_isend = 1
		WHERE g_id = #{g_id}
		    AND s_number = #{s_number}
		    AND sd_number = #{sd_number}
		    AND m_number = #{m_number}
		    AND go_number = #{go_number}
    </update>
    
	<!-- Member 환불포인트 업데이트 -->
	<update id="hsUpdatePointRefund" parameterType="map">
		UPDATE member SET m_currpoint = m_currpoint + #{refund_point}
		WHERE m_number = #{m_number}
	</update>
	
	
	<select id="selectOrder" parameterType="int" resultType="GymOrder">
		select * from gym_review 
		where m_number = {m_number}
	</select>
	
</mapper>